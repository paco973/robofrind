{"version":3,"sources":["components/Card.js","components/CardList.js","components/ShearBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","use","i","key","ShearBox","shearchfield","sheachChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSheachChange","event","seachfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","lenght","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAkBeA,EAbF,SAACC,GAAU,IAChBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACC,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACrD,6BACC,gCAAML,GACN,2BAAIC,MCaOK,EAtBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGjB,OACG,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACrB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCARW,EAbE,SAAC,GAAgC,EAA/BC,aAAgC,IAAlBC,EAAiB,EAAjBA,aAChC,OACE,yBAAKX,UAAU,OACd,2BACAA,UAAU,mCACVY,KAAK,UACLC,YAAY,iBACZC,SAAUH,MCECI,EATA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DvB,EAAMwB,WCkBJC,E,kDApBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAO,CACRC,UAAS,GAHC,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,0DAGJG,KAAK9B,MAAMwB,a,GAjBCQ,aCkDZC,G,wDA1Cd,aAAc,IAAD,8BACZ,gBAaDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAACK,WAAWD,EAAME,OAAOC,SAbvC,EAAKZ,MAAM,CACVlB,OAAO,GACP4B,WAAW,IAJA,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAQ7B,IAAD,EACqBb,KAAKJ,MAA1BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,WACTQ,EAAgBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAWW,kBAErD,OAAwB,IAAjBvC,EAAOyC,OACb,uCAEC,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAUW,aAAce,KAAKI,iBAC7B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,W,GAjCPZ,cCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.43b1cf43.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\nconst Card = (props) =>{\n\tconst {name, email, id} = props;\n\treturn(\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n\t\t\t<div>\n\t\t\t\t<h2> {name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({robots})=>{\n\t\n\t\n\treturn(\t\t\n\t  \t<div>\n\t  \t\t{\n\t  \t\t   robots.map((use, i) =>{\n\t\t\t\treturn(\n\t\t\t\t <Card \n\t\t\t\t  key={i} \n\t\t\t\t  id={robots[i].id} \n\t\t\t\t  name={robots[i].name} \n\t\t\t\t  email={robots[i].email}\n\t\t   \t    />\n\t\t   \t    );\n \t\t\t\t})\n\t  \t\t}\n\t  \t</div>\n\t)\n\t\n} \n\nexport default CardList;","import React from 'react';\n\nconst ShearBox = ({shearchfield, sheachChange}) =>{\n\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green ba-lightest-blue'\n\t\t\t\ttype='shearch' \n\t\t\t\tplaceholder='shearch robots' \n\t\t\t\tonChange={sheachChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n}\n\nexport default ShearBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react'\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooooops. That is not good </h1>\n        }\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from'../components/CardList';\nimport ShearBox from '../components/ShearBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'\n\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots:[],\n\t\t\tseachfield:''\n\t\t}\t\t\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots:users}))\t\n\t}\n\n\tonSheachChange =(event) =>{\n\t\tthis.setState({seachfield:event.target.value})\n\n\t}\n\n\trender(){\n\t\tconst {robots, seachfield}= this.state;\n\t\tconst filteredRobots= robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(seachfield.toLowerCase());\n\t\t})\n\t\treturn robots.lenght ===0 ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\t\t\t\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'> RoboFriend </h1>\n\t\t\t\t\t<ShearBox sheachChange={this.onSheachChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t\t\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}